<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

    <!--字符编码过滤器-->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!--指定字符编码-->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!--强制指定字符编码，即如果在request中指定了字符编码，那么也会为其强制指定当前设置的字符编码-->
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--SpringMVC 只能处理post和get,为了还原对put和delete的处理，web.xml里面要加如下过滤器-->
    <filter>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--配置Spring的监听器，默认情况下只加载WEB-INF目录下的applicationContext.xml配置文件-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!--设置配置文件applicationContext.xml的位置-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring-mybatis.xml</param-value>
    </context-param>

    <!--注册spring-mvc中央控制器-->
    <servlet>
        <servlet-name>spring-mvc</servlet-name>
        <!-- spring MVC中的核心控制器 -->
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <!--指定springmvc.xml的位置。如果不指定，默认会在WEB-INF下寻找-->
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <!-- 1)load-on-startup元素标记容器是否在启动的时候就加载这个servlet(实例化并调用其init()方法)。-->
        <!-- 2)它的值必须是一个整数，表示servlet应该被载入的顺序-->
        <!-- 3)当值为0或者大于0时，表示容器在应用启动时就加载并初始化这个servlet；-->
        <!-- 4)当值小于0或者没有指定时，则表示容器在该servlet被选择时才会去加载。-->
        <!-- 5)正数的值越小，该servlet的优先级越高，应用启动时就越先加载。-->
        <!-- 6)当值相同时，容器就会自己选择顺序来加载。-->
        <load-on-startup>1</load-on-startup>
        <!--支持异步处理，web.xml是2.5及之前的，那么会报错。servlet3.0之后出现支持异步处理-->
        <async-supported>true</async-supported>
    </servlet>
    <servlet-mapping>
        <servlet-name>spring-mvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- 设置session超时时间  单位为分钟    -->
    <session-config>
        <session-timeout>480</session-timeout>
    </session-config>

    <!--welcome-file-list是一个配置在web.xml中的一个欢迎页，用于当用户在url中输-->
    <!--入工程名称或者输入web容器url（如http://localhost:8080/）时直接跳转的页面.-->
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
</web-app>
